import pygame
pygame.init()

WIDTH=500
HEIGHT=480
win = pygame.display.set_mode((WIDTH,HEIGHT))

pygame.display.set_caption("First Game")

walkRight = [pygame.image.load('FinalProjectResources\Images\R1.png'), pygame.image.load('FinalProjectResources\Images\R2.png'), pygame.image.load('FinalProjectResources\Images\R3.png'), pygame.image.load('FinalProjectResources\Images\R4.png'), pygame.image.load('FinalProjectResources\Images\R5.png'), pygame.image.load('FinalProjectResources\Images\R6.png'), pygame.image.load('FinalProjectResources\Images\R7.png'), pygame.image.load('FinalProjectResources\Images\R8.png'), pygame.image.load('FinalProjectResources\Images\R9.png')]
walkLeft = [pygame.image.load('FinalProjectResources\Images\L1.png'), pygame.image.load('FinalProjectResources\Images\L2.png'), pygame.image.load('FinalProjectResources\Images\L3.png'), pygame.image.load('FinalProjectResources\Images\L4.png'), pygame.image.load('FinalProjectResources\Images\L5.png'), pygame.image.load('FinalProjectResources\Images\L6.png'), pygame.image.load('FinalProjectResources\Images\L7.png'), pygame.image.load('FinalProjectResources\Images\L8.png'), pygame.image.load('FinalProjectResources\Images\L9.png')]
bg = pygame.image.load('FinalProjectResources\Images\SkyBackground_Rayquaza.jpg')
SkyBG=pygame.transform.scale(bg,(WIDTH,HEIGHT))
char = pygame.image.load('FinalProjectResources\Images\standing.png')
manRect=pygame.Rect(210, 400, 64, 64)
BottomPlat= pygame.Rect(0,HEIGHT-20,WIDTH,10)
clock = pygame.time.Clock()
RayquazaHealth=pygame.Rect(WIDTH/2-100,WIDTH-(WIDTH-50),200,8)
green=(18,230,3)
Health=10
Ray1=pygame.image.load('FinalProjectResources\Images\RayquazaIdle.png')
RayIdle=pygame.transform.scale(Ray1,(WIDTH/4,HEIGHT-175))
RayHitbox=pygame.Rect(WIDTH-WIDTH/4,105,WIDTH/4,HEIGHT-175)
hitCount=0
class player(object):
    def __init__(self,x,y,width,height):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.vel = 5
        self.isJump = False
        self.left = False
        self.right = False
        self.walkCount = 0
        self.jumpCount = 10
        self.standing = True
        self.hitbox = (self.x+10, self.y+5, 25, 25)

    def draw(self, win):
        if self.walkCount + 1 >= 27:
            self.walkCount = 0
        self.hitbox = (self.x+10, self.y+10, 44, 50)
        pygame.draw.rect(win, (255,0,0), self.hitbox,2)
        if not(self.standing):
            if self.left:
                win.blit(walkLeft[self.walkCount//3], (self.x,self.y))
                self.walkCount += 1
            elif self.right:
                win.blit(walkRight[self.walkCount//3], (self.x,self.y))
                self.walkCount +=1
        else:
            if self.right:
                win.blit(walkRight[0], (self.x, self.y))
            else:
                win.blit(walkLeft[0], (self.x, self.y))
                


class projectile(object):
    def __init__(self,x,y,radius,color,facing):
        self.x = x
        self.y = y
        self.radius = radius
        self.color = color
        self.facing = facing
        self.vel = 8 * facing
        

    def draw(self,win):
        pygame.draw.circle(win, self.color, (self.x,self.y), self.radius)

class enemy(object):
    # walkRight = [pygame.image.load('R1E.png'), pygame.image.load('R2E.png'), pygame.image.load('R3E.png'), pygame.image.load('R4E.png'), pygame.image.load('R5E.png'), pygame.image.load('R6E.png'), pygame.image.load('R7E.png'), pygame.image.load('R8E.png'), pygame.image.load('R9E.png'), pygame.image.load('R10E.png'), pygame.image.load('R11E.png')]
    # walkLeft = [pygame.image.load('L1E.png'), pygame.image.load('L2E.png'), pygame.image.load('L3E.png'), pygame.image.load('L4E.png'), pygame.image.load('L5E.png'), pygame.image.load('L6E.png'), pygame.image.load('L7E.png'), pygame.image.load('L8E.png'), pygame.image.load('L9E.png'), pygame.image.load('L10E.png'), pygame.image.load('L11E.png')]
    
    def __init__(self, x, y, width, height,end):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.end=end
        self.hitbox = (self.x, self.y,WIDTH/4,HEIGHT-175)
        print((self.hitbox[0]))
        # self.path = [x, end]
        # self.walkCount = 0
        # self.vel = 3

    def draw(self, win):
        # self.move()
        win.blit(RayIdle,(RayHitbox.x,RayHitbox.y))
        self.hitbox = (self.x, self.y, WIDTH/4, HEIGHT-175) # NEW
        pygame.draw.rect(win, (255,0,0), self.hitbox,2)
    def hit(self):  # This will display when the enemy is hit
        print('hit')
        RayquazaHealth.width-=5
def redrawGameWindow():
    pygame.draw.rect(win, (255,255,255),RayHitbox)
    win.blit(SkyBG, (0,0))
    Rayquaza.draw(win)
    manRect=pygame.Rect(man.x+10, man.y+10, 46, 54)
    pygame.draw.rect(win, (255,255,255),manRect)
    man.draw(win)
    pygame.draw.rect(win, (255,255,255),BottomPlat)
    pygame.draw.rect(win,green,RayquazaHealth)
    for bullet in bullets:
        bullet.draw(win)
    
    pygame.display.update()


#mainloop
man = player(200, 400, 64,64)
Rayquaza=enemy(WIDTH-WIDTH/4,100,WIDTH/4,HEIGHT-175,0)
bullets = []
run = True
while run:
    clock.tick(27)
    print(man.x,man.y)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False
        
    for bullet in bullets:
        if bullet.x < 500 and bullet.x > 0:
            bullet.x += bullet.vel
        else:
            bullets.pop(bullets.index(bullet))

    keys = pygame.key.get_pressed()

    if keys[pygame.K_SPACE]:
        if man.left:
            facing = -1
        else:
            facing = 1
            
        if len(bullets) < 5:
            bullets.append(projectile(round(man.x + man.width //2), round(man.y + man.height//2), 6, (0,0,0), facing))

        for bullet in bullets:
            if (bullet.y - bullet.radius < Rayquaza.hitbox[1] + Rayquaza.hitbox[3]  and (bullet.y + bullet.radius > Rayquaza.hitbox[1]) and bullet.x + bullet.radius > Rayquaza.hitbox[0] and bullet.x - bullet.radius < Rayquaza.hitbox[0]+Rayquaza.hitbox[2]):
                # print("hi")
                # if bullet.x + bullet.radius > Rayquaza.hitbox[0] and bullet.x - bullet.radius < Rayquaza.hitbox[0]+Rayquaza.hitbox[2]:
                # print("hello")
                Rayquaza.hit()
                bullets.pop(bullets.index(bullet))
                hitCount+=1
                if hitCount==40: 
                    print("LEVEL 1 COMPLETE")
                    RayIdle=pygame.image.load('FinalProjectResources\Images\BLANK_ICON.png')


    if keys[pygame.K_LEFT] and man.x > man.vel:
        man.x -= man.vel
        manRect.x=man.x
        man.left = True
        man.right = False
        man.standing = False
    elif keys[pygame.K_RIGHT] and man.x < 500 - man.width - man.vel:
        man.x += man.vel
        manRect.x=man.x
        man.right = True
        man.left = False
        man.standing = False
    else:
        man.standing = True
        man.walkCount = 0

    if RayHitbox.colliderect(manRect):
        Health-=1
        print(Health) 
        man.x-=10
        if Health<=0:
            print("YOU DIED")
            quit()  
    if not(man.isJump):
        if keys[pygame.K_UP]:
            man.isJump = True
            man.right = False
            man.left = False
            man.walkCount = 0
    else:
        if man.jumpCount >= -10:
            neg = 1
            if man.jumpCount < 0:
                neg = -1
            man.y -= (man.jumpCount ** 2) * 0.5 * neg
            manRect.y=man.y
            man.jumpCount -= 1
        else:
            man.isJump = False
            man.jumpCount = 10
            
    redrawGameWindow()

pygame.quit()